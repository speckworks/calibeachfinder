{"ast":null,"code":"var Router = require(\"routes\");\n\nvar url = require(\"url\");\n\nvar location = require(\"global/document\").location;\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nvar extend = require(\"xtend/mutable\");\n\nmodule.exports = HashRouter;\n\nfunction HashRouter(opts) {\n  function applyChange(event) {\n    var hash = getRoute();\n    var newHash = hash;\n    var oldHash = \"#/\";\n\n    if (event && \"newURL\" in event && \"oldURL\" in event) {\n      var newUrl = url.parse(event.newURL);\n\n      if (newUrl && newUrl.hash) {\n        newHash = newUrl.hash;\n      }\n\n      var oldUrl = url.parse(event.oldURL);\n\n      if (oldUrl && oldUrl.hash) {\n        oldHash = oldUrl.hash;\n      }\n    }\n\n    var route = router.match(hash);\n\n    if (route) {\n      route.fn(hash, {\n        params: route.params,\n        splats: route.splats,\n        newUrl: newHash,\n        oldUrl: oldHash\n      });\n    }\n\n    applyChange.emit(\"hash\", hash, {\n      newUrl: newHash,\n      oldUrl: oldHash\n    });\n  }\n\n  opts = opts || {};\n  var setRoute = opts.setRoute || defaultSetRoute;\n  var getRoute = opts.getRoute || defaultGetRoute;\n  var router = Router();\n  applyChange.go = setRoute;\n  applyChange.get = getRoute;\n  applyChange.addRoute = router.addRoute.bind(router);\n  extend(applyChange, EventEmitter.prototype);\n  EventEmitter.call(applyChange);\n  return applyChange;\n}\n\nfunction defaultSetRoute(uri) {\n  location.hash = uri;\n}\n\nfunction defaultGetRoute() {\n  return location.hash || \"#/\";\n}","map":{"version":3,"sources":["/Users/johnspeck/Flatiron - Labs - etc./Mod_5/californiabeachfinder/frontend/node_modules/hash-router/index.js"],"names":["Router","require","url","location","EventEmitter","extend","module","exports","HashRouter","opts","applyChange","event","hash","getRoute","newHash","oldHash","newUrl","parse","newURL","oldUrl","oldURL","route","router","match","fn","params","splats","emit","setRoute","defaultSetRoute","defaultGetRoute","go","get","addRoute","bind","prototype","call","uri"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,QAA1C;;AACA,IAAIC,YAAY,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,YAArC;;AACA,IAAIC,MAAM,GAAGJ,OAAO,CAAC,eAAD,CAApB;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AAEA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACtB,WAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,QAAIC,IAAI,GAAGC,QAAQ,EAAnB;AACA,QAAIC,OAAO,GAAGF,IAAd;AACA,QAAIG,OAAO,GAAG,IAAd;;AAEA,QAAIJ,KAAK,IAAI,YAAYA,KAArB,IAA8B,YAAYA,KAA9C,EAAqD;AACjD,UAAIK,MAAM,GAAGd,GAAG,CAACe,KAAJ,CAAUN,KAAK,CAACO,MAAhB,CAAb;;AACA,UAAIF,MAAM,IAAIA,MAAM,CAACJ,IAArB,EAA2B;AACvBE,QAAAA,OAAO,GAAGE,MAAM,CAACJ,IAAjB;AACH;;AAED,UAAIO,MAAM,GAAGjB,GAAG,CAACe,KAAJ,CAAUN,KAAK,CAACS,MAAhB,CAAb;;AACA,UAAID,MAAM,IAAIA,MAAM,CAACP,IAArB,EAA2B;AACvBG,QAAAA,OAAO,GAAGI,MAAM,CAACP,IAAjB;AACH;AACJ;;AAED,QAAIS,KAAK,GAAGC,MAAM,CAACC,KAAP,CAAaX,IAAb,CAAZ;;AACA,QAAIS,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACG,EAAN,CAASZ,IAAT,EAAe;AACXa,QAAAA,MAAM,EAAEJ,KAAK,CAACI,MADH;AAEXC,QAAAA,MAAM,EAAEL,KAAK,CAACK,MAFH;AAGXV,QAAAA,MAAM,EAAEF,OAHG;AAIXK,QAAAA,MAAM,EAAEJ;AAJG,OAAf;AAMH;;AAEDL,IAAAA,WAAW,CAACiB,IAAZ,CAAiB,MAAjB,EAAyBf,IAAzB,EAA+B;AAC3BI,MAAAA,MAAM,EAAEF,OADmB;AACVK,MAAAA,MAAM,EAAEJ;AADE,KAA/B;AAGH;;AAEDN,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,MAAImB,QAAQ,GAAGnB,IAAI,CAACmB,QAAL,IAAiBC,eAAhC;AACA,MAAIhB,QAAQ,GAAGJ,IAAI,CAACI,QAAL,IAAiBiB,eAAhC;AAEA,MAAIR,MAAM,GAAGtB,MAAM,EAAnB;AAEAU,EAAAA,WAAW,CAACqB,EAAZ,GAAiBH,QAAjB;AACAlB,EAAAA,WAAW,CAACsB,GAAZ,GAAkBnB,QAAlB;AACAH,EAAAA,WAAW,CAACuB,QAAZ,GAAuBX,MAAM,CAACW,QAAP,CAAgBC,IAAhB,CAAqBZ,MAArB,CAAvB;AAEAjB,EAAAA,MAAM,CAACK,WAAD,EAAcN,YAAY,CAAC+B,SAA3B,CAAN;AACA/B,EAAAA,YAAY,CAACgC,IAAb,CAAkB1B,WAAlB;AAEA,SAAOA,WAAP;AACH;;AAED,SAASmB,eAAT,CAAyBQ,GAAzB,EAA8B;AAC1BlC,EAAAA,QAAQ,CAACS,IAAT,GAAgByB,GAAhB;AACH;;AAED,SAASP,eAAT,GAA2B;AACvB,SAAO3B,QAAQ,CAACS,IAAT,IAAiB,IAAxB;AACH","sourcesContent":["var Router = require(\"routes\")\nvar url = require(\"url\")\nvar location = require(\"global/document\").location\nvar EventEmitter = require(\"events\").EventEmitter\nvar extend = require(\"xtend/mutable\")\n\nmodule.exports = HashRouter\n\nfunction HashRouter(opts) {\n    function applyChange(event) {\n        var hash = getRoute()\n        var newHash = hash\n        var oldHash = \"#/\"\n\n        if (event && \"newURL\" in event && \"oldURL\" in event) {\n            var newUrl = url.parse(event.newURL)\n            if (newUrl && newUrl.hash) {\n                newHash = newUrl.hash\n            }\n\n            var oldUrl = url.parse(event.oldURL)\n            if (oldUrl && oldUrl.hash) {\n                oldHash = oldUrl.hash\n            }\n        }\n\n        var route = router.match(hash)\n        if (route) {\n            route.fn(hash, {\n                params: route.params,\n                splats: route.splats,\n                newUrl: newHash,\n                oldUrl: oldHash\n            })\n        }\n\n        applyChange.emit(\"hash\", hash, {\n            newUrl: newHash, oldUrl: oldHash\n        })\n    }\n\n    opts = opts || {}\n    var setRoute = opts.setRoute || defaultSetRoute\n    var getRoute = opts.getRoute || defaultGetRoute\n\n    var router = Router()\n\n    applyChange.go = setRoute\n    applyChange.get = getRoute\n    applyChange.addRoute = router.addRoute.bind(router)\n\n    extend(applyChange, EventEmitter.prototype)\n    EventEmitter.call(applyChange)\n\n    return applyChange\n}\n\nfunction defaultSetRoute(uri) {\n    location.hash = uri\n}\n\nfunction defaultGetRoute() {\n    return location.hash || \"#/\"\n}\n"]},"metadata":{},"sourceType":"script"}